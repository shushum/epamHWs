package com.epam.java.se;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Created by Yegor on 23.02.2017.
 */
public class PenTests {

    @Test
    public void equalsReflexivity() throws Exception{
        Pen pen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);

        assertTrue(pen.equals(pen));
    }

    @Test
    public void equalsSymmetry() throws Exception{
        Pen pen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);
        Pen anotherPen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);

        assertTrue(pen.equals(anotherPen));
        assertTrue(anotherPen.equals(pen));
    }

    @Test
    public void equalsTransitivity() throws Exception{
        Pen firstPen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);
        Pen secondPen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);
        Pen thirdPen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);

        assertTrue(firstPen.equals(secondPen));
        assertTrue(secondPen.equals(thirdPen));

        assertTrue(firstPen.equals(thirdPen));
    }

    @Test
    public void equalsConsistency() throws Exception{
        Pen pen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);
        Pen anotherPen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);

        assertTrue(pen.equals(anotherPen));
        assertTrue(pen.equals(anotherPen));
        assertTrue(pen.equals(anotherPen));
        assertTrue(pen.equals(anotherPen));
    }

    @Test
    public void equalsNull() throws Exception{
        Pen pen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);

        assertFalse(pen.equals(null));
    }

    @Test
    public void notEquals() throws Exception{
        Pen pen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);
        Pen anotherPen = new Pen(37,"qwer", InkColour.RED, PenType.INK);

        assertFalse(pen.equals(anotherPen));
        assertFalse(anotherPen.equals(pen));
    }

    @Test
    public void hashConsistency() throws Exception{
        Pen pen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);

        assertTrue(pen.hashCode()==pen.hashCode());
        assertTrue(pen.hashCode()==pen.hashCode());
        assertTrue(pen.hashCode()==pen.hashCode());
        assertTrue(pen.hashCode()==pen.hashCode());
    }

    @Test
    public void hashSymmetry() throws Exception{
        Pen pen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);
        Pen anotherPen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);

        assertTrue(pen.hashCode()==anotherPen.hashCode());
    }

    @Test
    public void hashNotEquals() throws Exception{
        Pen pen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);
        Pen anotherPen = new Pen(37,"qwe", InkColour.RED, PenType.BALLPEN);

        assertFalse(pen.hashCode()==anotherPen.hashCode());
    }

    @Test
    public void toStringTest() throws Exception{
        Pen pen = new Pen(31,"qwe", InkColour.BLACK, PenType.BALLPEN);

        System.out.println(pen.toString());
    }


}
